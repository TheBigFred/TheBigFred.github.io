<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fgeDoc's - devtools</title><link href="https://thebigfred.github.io/" rel="alternate"></link><link href="https://thebigfred.github.io/feeds/devtools.atom.xml" rel="self"></link><id>https://thebigfred.github.io/</id><updated>2019-04-24T21:01:00+02:00</updated><subtitle>Sharing notes</subtitle><entry><title>Compilation avec GCC</title><link href="https://thebigfred.github.io/compilation-avec-gcc.html" rel="alternate"></link><published>2017-02-05T21:55:00+01:00</published><updated>2019-04-24T21:01:00+02:00</updated><author><name>FGE</name></author><id>tag:thebigfred.github.io,2017-02-05:/compilation-avec-gcc.html</id><summary type="html">
&lt;p&gt;GCC, &lt;em&gt;Gnu Compiler Collection&lt;/em&gt;, est l'ensemble des outils nécessaires pour transformer votre code source en un binaire exécutable.
Un simple &lt;code&gt;gcc hello.c&lt;/code&gt; appel une …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;GCC, &lt;em&gt;Gnu Compiler Collection&lt;/em&gt;, est l'ensemble des outils nécessaires pour transformer votre code source en un binaire exécutable.
Un simple &lt;code&gt;gcc hello.c&lt;/code&gt; appel une suite d'outils dans un ordre précis pour créer un binaire nommé &lt;em&gt;a.out&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="les-phases-de-compilation-petit-rappel"&gt;Les phases de compilation, petit rappel&lt;/h2&gt;
&lt;p&gt;Lorsque l'on compile un fichier &lt;em&gt;c&lt;/em&gt;, gcc va appeler pour vous les outils suivants dans cet ordre :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Le préprocesseur&lt;/strong&gt; &lt;em&gt;(cpp)&lt;/em&gt;: traite l'ensemble des directives de précompilation tel que &lt;em&gt;#include&lt;/em&gt;, &lt;em&gt;#define&lt;/em&gt;, &lt;em&gt;#ifndef&lt;/em&gt;. Ici, il s'agit simplement de faire des copiés/collés dans votre code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Le compilateur&lt;/strong&gt; &lt;em&gt;(cc1)&lt;/em&gt;: vérifie la syntaxe, le respect des prototypes des fonctions et transforme votre code C en assembleur.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;L'assembleur&lt;/strong&gt; &lt;em&gt;(as)&lt;/em&gt;: transforme (assemble) le code assembleur en binaire compréhensible pour le micro-processeur. On nomme le résultat obtenu : &lt;em&gt;fichier objet&lt;/em&gt;. Ce n'est toujours pas un exécutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Le linker&lt;/strong&gt; &lt;em&gt;(ld)&lt;/em&gt;: nommé éditeur de liens en français, il va lier votre fichier objet avec les bibliothèques nécessaires (il faut le code de printf, de gets, ...) et également ajouter un loader qui permettra de charger l'application en mémoire.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il est possible d'arrêter gcc à chacune de ces étapes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gcc -E demo.c&lt;/code&gt;, donnera un fichier &lt;em&gt;demo.i&lt;/em&gt;, résultat du préprocesseur.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gcc -S demo.c&lt;/code&gt;, donnera un fichier &lt;em&gt;demo.s&lt;/em&gt;, qui contient le code assembleur générer par le compilateur.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gcc -c demo.c&lt;/code&gt;, donnera un fichier &lt;em&gt;demo.o&lt;/em&gt;, qui est notre fichier objet (binaire non exécutable).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="options-usuelles-de-gcc"&gt;Options usuelles de gcc&lt;/h2&gt;
&lt;p&gt;Il existe un nombre incroyable d'options pour gcc, voici les plus couramment utilisées.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-o&lt;/code&gt; : pour output, elle permet de spécifier le nom de l'application. Sans cette option, votre programme se nommera &lt;em&gt;a.out&lt;/em&gt;. &lt;code&gt;gcc -o hello hello.c&lt;/code&gt; donnera un binaire nommé &lt;em&gt;hello&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-g&lt;/code&gt; : ajoute les symboles (votre code en format txt) dans le binaire, cela permet d'utiliser un débogueur.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-D TRACE&lt;/code&gt; : est l'équivalent de &lt;code&gt;#define TRACE&lt;/code&gt;. Cela permet d'activer du code placé entre &lt;em&gt;#ifdef #endif&lt;/em&gt; sans devoir modifier vos fichiers pour y écrire (ou supprimer) &lt;code&gt;#define TRACE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-D SIZE_MAX=100&lt;/code&gt; : est l'équivalent de &lt;code&gt;#define SIZE_MAX 100&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Wall&lt;/code&gt; : permet d'afficher un maximum de warning sur votre code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Wextra&lt;/code&gt; : ajout des vérifications supplémentaires sur le code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-pedantics&lt;/code&gt; : demande à gcc de vérifier que votre code respecte la norme ISO C.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-std=&lt;/code&gt; : permet de préciser la norme C à utiliser. Les valeurs peuvent être :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c89, c90 : pour l'ISO C90&lt;/li&gt;
&lt;li&gt;c99 : pour l'ISO C99&lt;/li&gt;
&lt;li&gt;c11 : pour l'ISO C2011&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il existe également les extensions gnu : gnu90, gnu99, gnu11, gnu17. Si vous souhaitez compiler votre code avec d'autres
compilateur que gcc, n'utilisez pas ces extensions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-ansi&lt;/code&gt; : est équivalent à &lt;code&gt;-std=c90&lt;/code&gt;, mais interdit les commentaires du type &lt;code&gt;//&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-O2&lt;/code&gt; : optimise la vitesse d'exécution de votre code. En bref, le compilateur remanie votre code pour le rendre plus rapide. Cette option est à utiliser uniquement lorsque votre programme est au point. Déboguer un programme compilé en &lt;code&gt;-O2&lt;/code&gt; est nettement moins facile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-I include_path&lt;/code&gt; : permet d'indiquer un dossier où gcc peut trouver des fichiers .h.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-L lib_path&lt;/code&gt; : permet d'indiquer un dossier où le linker peut trouver des bibliothèques qui ne sont pas dans &lt;em&gt;/usr/local/lib&lt;/em&gt;, &lt;em&gt;/usr/lib&lt;/em&gt; ou dans &lt;em&gt;/lib&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-l libname&lt;/code&gt; : permet d'indiquer au linker le nom d'une bibliothèque. Si vous utilisez une fonction mathématique comme &lt;em&gt;sin&lt;/em&gt; ou &lt;em&gt;ceil&lt;/em&gt;, son code se trouve dans le fichier &lt;em&gt;libm.so&lt;/em&gt;. L'option à passer sera alors : &lt;code&gt;-lm&lt;/code&gt; (le nom du fichier sans le lib et l'extension).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="exemple"&gt;Exemple&lt;/h2&gt;
&lt;p&gt;Voici un petit code C qui utilise la libm.so ainsi qu'un ensemble de fichiers .h que nous aurions placé dans un dossier MyInclude à la racine du dossier utilisateur.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;"myinclude1.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;"myinclude2.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sin(%g) = %g&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef MAXVAL&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"code optionnel, MAX = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour compiler ce fichier en mode debug : &lt;code&gt;gcc -g -o myApp main.c -lm -I$HOME/MyInclude&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pour compiler ce fichier en mode release : &lt;code&gt;gcc -O2 -o myApp main.c -lm -I$HOME/MyInclude&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pour activer le code optionnel, il faut juste ajouter &lt;code&gt;-DMAXVAL&lt;/code&gt; aux commandes précédentes.&lt;/p&gt;
&lt;p&gt;Le code optionnel reprend une variable MAX non définie. l'idée est de définir MAX par le biais de la ligne de commande : &lt;code&gt;gcc -g -o myApp main.c -lm -I$HOME/MyInclude -DMAXVAL -DMAX=5&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="importance-du-parametre-std"&gt;Importance du paramètre &lt;code&gt;-std&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Le langage C a été inventé pour être portable. L'idée est qu'il suffit de compiler le code pour le faire fonctionner sur un microprocesseur différent de celui où on là écrit. Il faut évidemment disposer d'un compilateur C pour ce µP.&lt;/p&gt;
&lt;p&gt;Il arrive fréquemment d'écrire et tester du code sur PC et de le compiler ensuite pour une autre plateforme. Il ne faut pas perdre de vue que le compilateur de cette plateforme ne supporte pas forcément la dernière version de la norme C.&lt;/p&gt;
&lt;p&gt;Le flag &lt;code&gt;-std&lt;/code&gt; permet de forcer le compilateur à respecter une norme en particulier et s'assurer que le code sera compilable avec le compilateur de la plateforme.&lt;/p&gt;
&lt;p&gt;Une bibliothèque tierce n'est pas forcément compatible avec toutes les normes. Si la norme utilisée pour compiler n'est pas compatible, il faut arrêter la compilation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-std=c89&lt;/code&gt; &amp;amp; &lt;code&gt;-std=c90&lt;/code&gt; définissent uniquement la macro &lt;code&gt;__STDC__&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-std=c99&lt;/code&gt; définit la macro &lt;code&gt;__STD_VERSION__&lt;/code&gt; avec la valeur &lt;code&gt;199901L&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-std=c11&lt;/code&gt; définit la macro &lt;code&gt;__STD_VERSION__&lt;/code&gt; avec la valeur &lt;code&gt;201112L&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-std=c17&lt;/code&gt; définit la macro &lt;code&gt;__STD_VERSION__&lt;/code&gt; avec la valeur &lt;code&gt;201710L&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En utilisant des directives de précompilation, il est donc possible de vérifier la version de la norme utilisée pour compiler un code.&lt;/p&gt;
&lt;p&gt;Voici un premier exemple qui nécessite d'utiliser l'option &lt;code&gt;-std=c99&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#if (__STDC_VERSION__ != 199901L)&lt;/span&gt;
&lt;span class="cp"&gt;#error "Ce code est compatible uniquement avec C99 !!!"&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%ld&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;__STDC_VERSION__&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gcc std.c
error: &lt;span class="s2"&gt;"Ce code est compatible uniquement avec C99 !!!"&lt;/span&gt;
&lt;span class="c1"&gt;#error "Ce code est compatible uniquement avec C99 !!!"&lt;/span&gt;
 ^
&lt;span class="m"&gt;1&lt;/span&gt; error generated.
$
$ gcc std.c -std&lt;span class="o"&gt;=&lt;/span&gt;c99
$ ./a.out 
&lt;span class="m"&gt;199901&lt;/span&gt;
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dans ce second exemple, le standard C doit être au minimum c11 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#if (__STDC_VERSION__ &amp;lt; 201112L)&lt;/span&gt;
&lt;span class="cp"&gt;#error "Ce code nécessite C11 !!!"&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%ld&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;__STDC_VERSION__&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gcc std.c -std&lt;span class="o"&gt;=&lt;/span&gt;c99
error: &lt;span class="s2"&gt;"Ce code nécessite C11 !!!"&lt;/span&gt;
&lt;span class="c1"&gt;#error "Ce code nécessite C11 !!!"&lt;/span&gt;
 ^
&lt;span class="m"&gt;1&lt;/span&gt; error generated.
$
$ gcc std.c
$ ./a.out 
&lt;span class="m"&gt;201112&lt;/span&gt;
$
$ gcc std.c -std&lt;span class="o"&gt;=&lt;/span&gt;c11
$ ./a.out 
&lt;span class="m"&gt;201112&lt;/span&gt;
$
$ gcc std.c -std&lt;span class="o"&gt;=&lt;/span&gt;c17
$ ./a.out 
&lt;span class="m"&gt;201710&lt;/span&gt;
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ici, on peut constater que sans option, c'est la norme c11 qui est appliquée.&lt;/p&gt;
&lt;h2 id="compilation-c"&gt;Compilation C++&lt;/h2&gt;
&lt;p&gt;Pour compiler du code C++, on utilise &lt;em&gt;g++&lt;/em&gt; au lieu de &lt;em&gt;gcc&lt;/em&gt; et le tour est joué.&lt;/p&gt;
&lt;p&gt;Les options de compilations vues ci-dessus sont les mêmes, mises à part les valeurs de l'option -std. La macro __cplusplus
contient la valeur du standard.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c++98 : pour l'ISO C++ 1998, __cplusplus est définit à 199711L.&lt;/li&gt;
&lt;li&gt;c++11 : pour l'ISO C++ 2011, __cplusplus est définit à 201103L.&lt;/li&gt;
&lt;li&gt;c++14 : pour l'ISO C++ 2014, __cplusplus est définit à 201402L.&lt;/li&gt;
&lt;li&gt;C++17 : pour l'ISO C++ 2017, __cplusplus est définit à 201703L.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il existe également les extensions gnu : gnu++98, gnu++11, gnu++14 et gnu++17.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__cplusplus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ g++ std.cpp &lt;span class="p"&gt;;&lt;/span&gt; ./a.out 
&lt;span class="m"&gt;199711&lt;/span&gt;
$ g++ std.cpp -std&lt;span class="o"&gt;=&lt;/span&gt;c++11 &lt;span class="p"&gt;;&lt;/span&gt; ./a.out 
&lt;span class="m"&gt;201103&lt;/span&gt;
$ g++ std.cpp -std&lt;span class="o"&gt;=&lt;/span&gt;c++14 &lt;span class="p"&gt;;&lt;/span&gt; ./a.out 
&lt;span class="m"&gt;201402&lt;/span&gt;
$ g++ std.cpp -std&lt;span class="o"&gt;=&lt;/span&gt;c++17 &lt;span class="p"&gt;;&lt;/span&gt; ./a.out 
&lt;span class="m"&gt;201703&lt;/span&gt;
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il n'y a pas de &lt;em&gt;return 0&lt;/em&gt; à la fin de mon fichier &lt;em&gt;.cpp&lt;/em&gt;. Ceci n'est pas une faute, la norme c++ définit un &lt;em&gt;return 0&lt;/em&gt;
implicite à la fin de la fonction main.&lt;/p&gt;
&lt;h2 id="compilation-de-plusieurs-fichiers"&gt;Compilation de plusieurs fichiers&lt;/h2&gt;
&lt;p&gt;Pour compiler une application constituée de plusieurs fichiers c, il suffit d'indiquer la liste des fichiers à compiler : &lt;code&gt;gcc -g -o myApp main.c mesfonctions.c -lm -I$HOME/MyInclude&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cette méthode a plusieurs inconvénients :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tous les fichiers sont recompilés à chaque fois. Pour un projet plus conséquent de 10, 20, 30 ou 100 fichiers, la compilation peut perdre du temps.&lt;/li&gt;
&lt;li&gt;La ligne de commande devient abominable.&lt;/li&gt;
&lt;li&gt;On modifie rarement la totalité des fichiers, il est donc inutile de les compiler tous à chaque fois.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L'idée est de compiler chaque fichier .c en .o avec l'option &lt;em&gt;-c&lt;/em&gt; de gcc : &lt;code&gt;gcc -c mesfonctions.c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lorsque tous les fichiers &lt;em&gt;.c&lt;/em&gt; sont compilés, il reste qu'à les linker : &lt;code&gt;gcc -g -o myApp main.o mesfonctions.o -lm -I$HOME/MyInclude&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Il reste un inconvénient, si l'on modifie un .c dont dépendent d'autres fichiers, il faut s'en souvenir est les recompiler également. En résumé, il faut gérer les dépendances entre fichiers.&lt;/p&gt;
&lt;p&gt;Il existe des outils permettant de gérer presque automatiquement ces dépendances. Un des plus connus est &lt;strong&gt;make&lt;/strong&gt;.&lt;/p&gt;</content><category term="devtools"></category><category term="cmd-line"></category><category term="GNU-Tools"></category></entry><entry><title>Écrire un Makefile</title><link href="https://thebigfred.github.io/ecrire-un-makefile.html" rel="alternate"></link><published>2017-02-05T21:55:00+01:00</published><updated>2019-04-23T20:23:00+02:00</updated><author><name>FGE</name></author><id>tag:thebigfred.github.io,2017-02-05:/ecrire-un-makefile.html</id><summary type="html">
&lt;p&gt;Make est un outil qui permet d'exécuter des commandes et de gérer les dépendances qui existent entre les fichiers d'un projet.&lt;/p&gt;
&lt;p&gt;Cet article est une …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Make est un outil qui permet d'exécuter des commandes et de gérer les dépendances qui existent entre les fichiers d'un projet.&lt;/p&gt;
&lt;p&gt;Cet article est une introduction et n'a pas pour but de présenter la totalité du &lt;a href="https://www.gnu.org/software/make/manual/make.html"&gt;manuel de make&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make n'est pas dévolu à la compilation de programmes écrit en C, il peut aussi bien être utilisé pour compiler des fichiers latex ou simplement pour exécuter des commandes shell.&lt;/p&gt;
&lt;p&gt;Les commandes à exécuter ainsi que les dépendances entre fichiers sont décrites dans un fichier nommé makefile.&lt;/p&gt;
&lt;h2 id="les-bases"&gt;Les bases&lt;/h2&gt;
&lt;p&gt;Un makefile est composé d'une ou plusieurs règles. Une règle peut représenter un exécutable, une bibliothèque ou un groupe de commandes quelconques.&lt;/p&gt;
&lt;p&gt;Lorsque l'on exécute la commande &lt;code&gt;make&lt;/code&gt;, GNU make cherche dans le dossier courant après un fichier nommé GNUmakefile, makefile, Makefile (dans cet ordre).&lt;/p&gt;
&lt;p&gt;Il est recommandé d'utiliser le nom Makefile, car le &lt;em&gt;M&lt;/em&gt; est plus visible. Le nom GNUmakefile n'est à utiliser que si vous utilisez des spécificités de GNU make.&lt;/p&gt;
&lt;p&gt;Une règle de makefile ressemble à ceci :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;cible &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;é&lt;span class="n"&gt;pendances&lt;/span&gt;
    recette
    …
    …
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Avec le vocable anglais :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;target &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;prerequisites&lt;/span&gt;
    recipe
    …
    …
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Les commandes écrites sous les cibles doivent être indentées obligatoirement avec une tabulation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="premier-exemple"&gt;Premier exemple&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    gcc -o hello.bin hello.c

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm hello.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ce &lt;em&gt;makefile&lt;/em&gt; est constitué de deux cibles :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La cible hello : permet de créer l'application nommée hello.bin&lt;/li&gt;
&lt;li&gt;La cible clean : permet de supprimer cette application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La commande &lt;code&gt;make hello&lt;/code&gt; crée l'exécutable, la commande &lt;code&gt;make clean&lt;/code&gt; le supprime. La commande &lt;code&gt;make&lt;/code&gt;, sans target, exécutera uniquement la première target trouvée dans le makefile.&lt;/p&gt;
&lt;p&gt;Voici le résultat de l'exécution :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;gcc -o hello.bin hello.c&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;make clean
&lt;span class="go"&gt;rm hello.bin&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="second-exemple"&gt;Second exemple&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt;
    gcc -o hello.bin hello.c mesfonctions.o

&lt;span class="nf"&gt;mesfonctions.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;h&lt;/span&gt;
    gcc -c mesfonctions.c

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm hello.bin mesfonctions.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nous avons ajouté une target &lt;em&gt;mesfonctions.o&lt;/em&gt; qui compile le fichier &lt;em&gt;mesfonctions.c&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Nous avons également ajouté des dépendances, il s'agit de la liste de fichiers qui suit la définition de la &lt;em&gt;target&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La &lt;em&gt;target hello&lt;/em&gt; dépend des fichiers &lt;em&gt;hello.c&lt;/em&gt; et &lt;em&gt;mesfonctions.o&lt;/em&gt;.
La &lt;em&gt;target mesfonctions.o&lt;/em&gt; dépend des fichiers &lt;em&gt;mesfonctions.c&lt;/em&gt; et &lt;em&gt;mesfonctions.h&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Avant d’exécuter la recette de la target &lt;em&gt;hello&lt;/em&gt;, &lt;em&gt;make&lt;/em&gt; va vérifier si ces dépendances sont à jour. &lt;em&gt;make&lt;/em&gt;  recherche la target &lt;em&gt;mesfonctions.o&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La vérification de la target &lt;em&gt;mesfonctions.o&lt;/em&gt; consiste à vérifier que la date et l'heure du fichier &lt;em&gt;mesfonctions.o&lt;/em&gt; est plus récente que celles de ses dépendances.  Si c'est la cas, make continue sans exécuter la recette de la cible &lt;em&gt;mesfonctions.o&lt;/em&gt;, sinon il l'exécute.&lt;/p&gt;
&lt;p&gt;Ce mécanisme permet de recompiler uniquement les fichiers qui ont été modifié depuis la dernière compilation.&lt;/p&gt;
&lt;p&gt;Voici le résultat de l'exécution :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;gcc -c mesfonctions.c&lt;/span&gt;
&lt;span class="go"&gt;gcc -o hello.bin hello.c mesfonctions.o&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Une modification du fichier &lt;em&gt;mesfonctions.c&lt;/em&gt; recompile le tout :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &amp;gt;&amp;gt; mesfonctions.c 
&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;gcc -c mesfonctions.c&lt;/span&gt;
&lt;span class="go"&gt;gcc -o hello.bin hello.c mesfonctions.o&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Une modification du fichier &lt;em&gt;hello.c&lt;/em&gt; ne recompile pas le fichier &lt;em&gt;mesfonctions.c&lt;/em&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &amp;gt;&amp;gt; hello.c 
&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;gcc -o hello.bin hello.c mesfonctions.o&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Si l'on modifie l'heure du PC, il faut supprimer tous les fichiers générés.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Si nous exécutons plusieurs fois &lt;code&gt;make&lt;/code&gt;, hello.bin est systématiquement recompilé, même si nous ne modifions pas les fichiers sources !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;gcc -o hello.bin hello.c mesfonctions.o&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;gcc -o hello.bin hello.c mesfonctions.o&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ceci est dû au fait que nous générons un fichier &lt;em&gt;hello.bin&lt;/em&gt; non pas &lt;em&gt;hello&lt;/em&gt;.
Lorsque make 'vérifie' une target, il cherche un fichier qui porte le même nom que la target.
Il faut donc veiller à ce que les noms des targets et des fichiers générés coïncident.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt;
    gcc -o hello hello.c mesfonctions.o

&lt;span class="nf"&gt;mesfonctions.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;h&lt;/span&gt;
    gcc -c mesfonctions.c

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm hello mesfonctions.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maintenant deux appels consécutifs à make ne recompilent plus inutilement &lt;em&gt;hello&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;gcc -o hello hello.c mesfonctions.o&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;make: 'hello' is up to date.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="les-variables"&gt;Les variables&lt;/h2&gt;
&lt;p&gt;Les variables, parfois appelées MACRO, permettent de substituer du texte. Le nom d'une variable ne peut contenir les symboles ':', '#', '=' et l'espace.&lt;/p&gt;
&lt;p&gt;Il est généralement conseillé de n'utiliser que des lettres, des nombres et le symbole underscore. Le nom d'une variable est &lt;em&gt;case-sensitive&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Habituellement, les noms de variables sont en majuscules. Cependant, le manuel &lt;em&gt;GNU Make&lt;/em&gt; fait les recommandations suivantes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;utiliser des noms en minuscules pour les variables à usage interne ;&lt;/li&gt;
&lt;li&gt;réserver les noms en majuscules pour :&lt;ul&gt;
&lt;li&gt;des paramètres contrôlant des règles implicites ;&lt;/li&gt;
&lt;li&gt;des paramètres que l'utilisateur peut (re)définir par des options de la ligne de commande.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="definir-une-variable"&gt;Définir une variable&lt;/h3&gt;
&lt;p&gt;Pour définir une variable, on débute une nouvelle ligne  qui commence par le nom de la variable, suivi par '=', ':=' ou '::='. Tout ce qui se trouve à droite du signe d'affectation est le contenu de la variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; hello.o mesfonctions.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ceci définit une variable nommée &lt;em&gt;objects&lt;/em&gt; dont le contenu est : &lt;em&gt;hello.o mesfonctions.o&lt;/em&gt;. Les espaces entourant le signe d'affectation sont ignorés.&lt;/p&gt;
&lt;p&gt;Pour utiliser une variable, on utilise la notation &lt;code&gt;$(nom_variable)&lt;/code&gt;ou &lt;code&gt;${nom_variable}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; hello.o mesfonctions.o
&lt;span class="nf"&gt;hello &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;objects&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
        gcc -o hello.bin &lt;span class="k"&gt;$(&lt;/span&gt;objects&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si le nom de la variable ne fait qu'un caractère, les parenthèses ou les accolades ne sont pas nécessaires. On peut donc utiliser une variable &lt;em&gt;x&lt;/em&gt; et y faire référence pas &lt;em&gt;$x&lt;/em&gt;. Cette pratique est fortement découragée.&lt;/p&gt;
&lt;p&gt;Il n'y a pas de limite sur la longueur du contenu d'une variable (à l'exception de la taille de la mémoire disponible).&lt;/p&gt;
&lt;h4 id="type-de-variable"&gt;Type de variable&lt;/h4&gt;
&lt;p&gt;Il existe deux catégories de variables : &lt;em&gt;les variables expansées récursivement&lt;/em&gt; et &lt;em&gt;les variables simplement expansées&lt;/em&gt;.&lt;/p&gt;
&lt;h5 id="variables-expansees-recursivement"&gt;Variables expansées récursivement&lt;/h5&gt;
&lt;p&gt;Elles se définissent en utilisant le signe '=' ou la directive &lt;em&gt;define&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si une variable de ce type fait référence à une seconde variable, la seconde variable sera évaluée et son contenu la remplacera et ceci de manière récursive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;bar&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Hello &lt;span class="k"&gt;$(&lt;/span&gt;who&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;who&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; world !!!

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;foo&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ce makefile affichera &lt;em&gt;Hello world !!!&lt;/em&gt;, comme on s'y attend.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ce type de variable a plusieurs inconvénients, dont un majeur, il n'est pas possible d'affecter une variable à elle-même.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -O
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ceci crée une boucle infinie !&lt;/p&gt;
&lt;h5 id="variables-simplement-expansees"&gt;Variables simplement expansées&lt;/h5&gt;
&lt;p&gt;Elles permettent de contourner les problèmes des variables expansées récursivement.&lt;/p&gt;
&lt;p&gt;Les variables simplement expansées sont définies en utilisant le signe ':=' ou '::='. Les deux signes sont équivalents.&lt;/p&gt;
&lt;p&gt;Cependant, le signe '::=' à été ajouté dans la norme 2012 du standard POSIX et n'est donc peut-être pas supporté par une ancienne version de make.&lt;/p&gt;
&lt;p&gt;La valeur d'une variable simplement expansée est calculée une seule fois lors de sa définition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; Hello
&lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;x&lt;span class="k"&gt;)&lt;/span&gt; world
&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; !!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;est équivalent à &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; Hello world
&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; !!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ajouter-du-contenu-a-une-variable"&gt;Ajouter du contenu à une variable&lt;/h3&gt;
&lt;p&gt;Pour concaténer du contenu à une variable, quel que soit son type, on utilise le signe '+='.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; main.o foo.o bar.o utils.o
&lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; another.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ce qui est l'équivalent de &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; main.o foo.o bar.o utils.o
&lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;objects&lt;span class="k"&gt;)&lt;/span&gt; another.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si la variable n'est pas définie, avec l'utilisation du signe '+=', celui-ci agira comme '=' et définira donc une variable expansée récursivement.&lt;/p&gt;
&lt;h3 id="supprimer-une-variable"&gt;Supprimer une variable&lt;/h3&gt;
&lt;p&gt;Pour supprimer le contenu d'une variable, il suffit de lui affecter un contenu vide.&lt;/p&gt;
&lt;p&gt;Cependant, il y a une différence entre une variable non définie et une variable vide. Une variable non définie n'existe pas, alors qu'une variable vide existe, mais n'a pas de contenu.&lt;/p&gt;
&lt;p&gt;Le mot-clef &lt;em&gt;undefine&lt;/em&gt; permet de supprimer une variable.&lt;/p&gt;
&lt;h3 id="les-variables-denvironnement"&gt;Les variables d'environnement&lt;/h3&gt;
&lt;p&gt;Toutes les variables d'environnement vu par make lors de son démarrage sont transformées en variable make avec le même nom et la même valeur.&lt;/p&gt;
&lt;p&gt;Il est ainsi possible de passer des options de compilation sans modifier le makefile. Il faut pour cela que le makefile n’écrase pas le contenu de cette variable par une affection avec &lt;code&gt;=&lt;/code&gt; ou &lt;code&gt;:=&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="target-phony"&gt;Target PHONY&lt;/h2&gt;
&lt;p&gt;Dans certains &lt;em&gt;makefile&lt;/em&gt; écrits jusqu’à présent, nous avons une &lt;em&gt;target clean&lt;/em&gt; qui n'a pas de dépendance et qui ne produit aucun fichier.&lt;/p&gt;
&lt;p&gt;Si votre dossier contient un fichier nommé &lt;em&gt;clean&lt;/em&gt;, cela va poser un problème.&lt;/p&gt;
&lt;p&gt;Lors de l'appel de la commande &lt;code&gt;make clean&lt;/code&gt;, &lt;em&gt;make&lt;/em&gt; va détecter le fichier &lt;em&gt;clean&lt;/em&gt; et considérer qu'il est à jour ! La recette ne sera jamais exécutée.&lt;/p&gt;
&lt;p&gt;Pour résoudre ce problème, on déclare simplement clean comme dépendance à la cible spécial &lt;em&gt;.PHONY&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Les dépendances de la cible &lt;em&gt;.PHONY&lt;/em&gt; sont exécutées inconditionnellement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -f *.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="exemple"&gt;Exemple&lt;/h2&gt;
&lt;p&gt;Dans l'exemple suivant, les variables &lt;em&gt;CPPFLAGS&lt;/em&gt;,&lt;em&gt;CFLAGS&lt;/em&gt;,&lt;em&gt;LDFLAGS&lt;/em&gt;,&lt;em&gt;LDLIBS&lt;/em&gt; sont vides. Ce qui suit le caractère &lt;em&gt;#&lt;/em&gt; est en commentaire pour donner un exemple d'utilisation de ces variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc
&lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -I/opt/XXXX/include&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;   &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -O2 -std=c11&lt;/span&gt;
&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;  &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -L/opt/XXXX/lib&lt;/span&gt;
&lt;span class="nv"&gt;LDLIBS&lt;/span&gt;   &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -lpthread -lrt -lm -lXYZ&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -o hello hello.o mesfonctions.o &lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;LDLIBS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;hello.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c hello.c &lt;span class="k"&gt;$(&lt;/span&gt;CPPFLAGS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;mesfonctions.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c mesfonctions.c &lt;span class="k"&gt;$(&lt;/span&gt;CPPFLAGS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;mrproper&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -f *.o

&lt;span class="nf"&gt;mrproper&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
    rm -f hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="static-pattern"&gt;STATIC PATTERN&lt;/h2&gt;
&lt;p&gt;Afin de ne pas devoir écrire explicitement une recette pour chaque fichier .c, il est possible d'utiliser une règle &lt;em&gt;générique&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc
&lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -I/opt/XXXX/include&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;   &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -O2 -std=c11&lt;/span&gt;
&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;  &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -L/opt/XXXX/lib&lt;/span&gt;
&lt;span class="nv"&gt;LDLIBS&lt;/span&gt;   &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -lpthread -lrt -lm -lXYZ&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; $^ &lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;LDLIBS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;%.o &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c $&amp;lt; &lt;span class="k"&gt;$(&lt;/span&gt;CPPFLAGS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;mrproper&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -f *.o

&lt;span class="nf"&gt;mrproper&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
    rm -f hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voici la signification des variables spéciales utilisée ci-dessus :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$@ : le nom de la cible &lt;/li&gt;
&lt;li&gt;$&amp;lt; : le nom de la 1er dépendance&lt;/li&gt;
&lt;li&gt;$^ : la liste de dépendance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La &lt;em&gt;subtilité&lt;/em&gt; est ici : &lt;code&gt;%.o : %.c&lt;/code&gt;. Ceci précise à make que lorsqu'il recherche une target se terminant par .o (d'extension .o), cette target dépend d'un fichier du même nom et d'extension .c.&lt;/p&gt;
&lt;h2 id="les-regles-implicites"&gt;Les règles implicites&lt;/h2&gt;
&lt;p&gt;Des recettes par défaut sont définies par make pour plusieurs langages, notamment le C, le C++, le fortran, TeX et quelques autres.&lt;/p&gt;
&lt;p&gt;Pour utiliser une règle implicite, il suffit de définir une target sans recette, ou encore ne pas écrire la target.&lt;/p&gt;
&lt;p&gt;Si l'on reprend l'exemple ci-dessus, on peut supprimer la recette de la target &lt;code&gt;%.o : %.c&lt;/code&gt;, ou même supprimer cette target.&lt;/p&gt;
&lt;p&gt;En rencontrant &lt;em&gt;hello.o&lt;/em&gt; et &lt;em&gt;mesfonctions.o&lt;/em&gt;, make va chercher à utiliser une de ces règles implicites. Dans ce cas ci, make trouvera des fichiers .c correspondant aux dépendances et utilisera donc la règle implicite du C.&lt;/p&gt;
&lt;p&gt;Un fichier .o est fabriqué automatiquement à partir d'un fichier du même nom, l’extension du fichier désigne la recette qui sera utilisée.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;fichier source&lt;/th&gt;
&lt;th&gt;recette utilisée&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;.c&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$(CC) $(CPPFLAGS) $(CFLAGS) -c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compilateur C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;.cc / .cpp / .C&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compilateur C++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;.s&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$(AS) $(ASFLAGS)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Assembleur&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Un fichier .s est fabriqué automatiquement à partir d'un fichier du même nom et d’extension .S. La recette utilisée sera celle du préprocesseur : &lt;code&gt;$(CPP) $(CPPFLAGS)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Un binaire sera fabriqué automatiquement depuis un fichier du même nom et d’extension .o. La recette utilisée sera celle de l'éditeur de liens (linker) : &lt;code&gt;$(CC) -o $@ $^ $(LDFLAGS) $(LDLIBS)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cette règle fonctionne pour un programme simple d'un fichier source. Elle fonctionne également avec plusieurs fichiers sources, un des fichiers sources devant définir le nom du binaire &lt;code&gt;x: y.o z.o&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Dans les cas plus complexes, il faut écrire les recettes de l'éditeur de liens.&lt;/p&gt;
&lt;p&gt;Voici les variables utilisées par les règles implicites :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variables&lt;/th&gt;
&lt;th&gt;Valeur par défaut&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CC&lt;/td&gt;
&lt;td&gt;cc&lt;/td&gt;
&lt;td&gt;compilateur C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CXX&lt;/td&gt;
&lt;td&gt;g++&lt;/td&gt;
&lt;td&gt;compilateur C++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPP&lt;/td&gt;
&lt;td&gt;$(CC) -E&lt;/td&gt;
&lt;td&gt;préprocesseur C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CFLAGS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;options à passer au compilateur C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CXXFLAGS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;options à passer au compilateur C++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPPFLAGS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;options à passer au préprocesseur, comme -I&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LDFLAGS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;options à passer au linker, comme -L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LDLIBS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;options à passer au linker, comme -l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AR&lt;/td&gt;
&lt;td&gt;ar&lt;/td&gt;
&lt;td&gt;archiver utilisé pour créer des lib statiques&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARFLAGS&lt;/td&gt;
&lt;td&gt;rv&lt;/td&gt;
&lt;td&gt;options à passer à l'archiver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AS&lt;/td&gt;
&lt;td&gt;as&lt;/td&gt;
&lt;td&gt;l'assembleur&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ASFLAGS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;options à passer à l'assembleur lorsque qu'il est invoqué explicitement sur fichier un '.s' ou '.S'&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On peut maintenant réécrire l’exemple précédent :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc
&lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -I/opt/XXXX/include&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;   &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -O2 -std=c11&lt;/span&gt;
&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;  &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -L/opt/XXXX/lib&lt;/span&gt;
&lt;span class="nv"&gt;LDLIBS&lt;/span&gt;   &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -lpthread -lrt -lm -lXYZ&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mesfonctions&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;mrproper&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -f *.o

&lt;span class="nf"&gt;mrproper&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
    rm -f hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wildcard"&gt;Wildcard&lt;/h2&gt;
&lt;p&gt;Si votre projet comporte beaucoup de fichiers, cela devient problématique de maintenir la liste des dépendances du binaire.&lt;/p&gt;
&lt;p&gt;On peut alors être tenté de créer une variable &lt;code&gt;objects = *.o&lt;/code&gt; qui désignerait tous les fichiers .o.&lt;/p&gt;
&lt;p&gt;La variable &lt;em&gt;objects&lt;/em&gt; contient la chaîne de caractères *.o et non l'ensemble des fichiers .o. De plus, si votre dossier ne contient aucun fichier .o, l’expansion de *.o est vide.&lt;/p&gt;
&lt;p&gt;Voici comment procéder :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utiliser &lt;code&gt;$(wildcard *.c)&lt;/code&gt; pour lister les fichiers .c du dossier.&lt;/li&gt;
&lt;li&gt;Utiliser la substitution de pattern pour transformer les .c en .o &lt;code&gt;$(patsubst %.c,%.o,$(wildcard *.c))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;patsubt comprend 3 arguments :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;le premier est %.c, c'est le pattern de recherche,&lt;/li&gt;
&lt;li&gt;le second est %.o, c'est le pattern de substitution,&lt;/li&gt;
&lt;li&gt;le troisième la liste des fichiers à traiter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Votre makefile devient ceci :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc
&lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -I/opt/XXXX/include&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;   &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -O2 -std=c11&lt;/span&gt;
&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;  &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -L/opt/XXXX/lib&lt;/span&gt;
&lt;span class="nv"&gt;LDLIBS&lt;/span&gt;   &lt;span class="o"&gt;+=&lt;/span&gt;                     &lt;span class="c1"&gt;# -lpthread -lrt -lm -lXYZ&lt;/span&gt;

&lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.c,%.o,&lt;span class="k"&gt;$(&lt;/span&gt;wildcard *.c&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="nf"&gt;hello &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;objects&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;mrproper&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -f *.o

&lt;span class="nf"&gt;mrproper&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
    rm -f hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dossier-de-rechercher-des-dependances"&gt;Dossier de rechercher des dépendances&lt;/h2&gt;
&lt;p&gt;Jusqu’à présent, les fichiers sources ont toujours été dans le même dossier que le fichier Makefile. Mais, lorsque le nombre de fichiers augmente, ou peut vouloir organiser ces sources dans différents sous-dossiers.&lt;/p&gt;
&lt;p&gt;Le plus simple est alors d'utiliser la variable &lt;code&gt;VPATH&lt;/code&gt;. Cette variable indique à make dans quels dossiers chercher les fichiers qu'il ne trouve pas dans le dossier contenant le Makefile.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VPATH&lt;/code&gt; contient simplement une liste de dossiers séparés par &lt;code&gt;:&lt;/code&gt; : &lt;code&gt;VPATH=sources:includes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Il existe également la directive &lt;code&gt;vpath&lt;/code&gt; (en minuscule) qui permet également de spécifier une liste de dossiers pour des fichiers qui respectent un pattern donné : &lt;code&gt;vpath %.h includes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lorsqu'une dépendance est trouvée dans un dossier référencé par VPATH, cela n'adapte pas la recette. Il faut donc écrire les recettes pour prendre en compte ces dossiers.&lt;/p&gt;
&lt;p&gt;Notez également que les wildcard ou la substitution de pattern vu ci-dessus ne tiennent pas compte de &lt;code&gt;VPATH&lt;/code&gt;. Lorsque l'on écrit &lt;code&gt;$(wildcard *.c)&lt;/code&gt;, on demande à make de faire la liste des fichiers .c du dossier dans lequel se trouve le makefile.&lt;/p&gt;
&lt;h2 id="exemple_1"&gt;Exemple&lt;/h2&gt;
&lt;p&gt;Le projet est organisé comme suit :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;le sous-dossier &lt;em&gt;src&lt;/em&gt; contient toutes les sources de l'application ;&lt;/li&gt;
&lt;li&gt;j'ai également décidé de déplacer chaque fichier .o dans un sous-dossier &lt;em&gt;objs&lt;/em&gt; ;&lt;/li&gt;
&lt;li&gt;l'application finale sera placée dans le sous-dossier &lt;em&gt;dist&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Je définis des variables contenant les noms des dossiers &lt;em&gt;src&lt;/em&gt;, &lt;em&gt;objs&lt;/em&gt; et &lt;em&gt;dist&lt;/em&gt;. Cela permet par la suite modifier plus facilement les noms de ces dossiers si besoin.&lt;/p&gt;
&lt;p&gt;Analysons la ligne OBJS en plusieurs étapes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$(wildcard $(SRCDIR)/*.c)&lt;/code&gt; : crée la liste des fichiers .c se trouvant dans le sous-dossier &lt;code&gt;src&lt;/code&gt;. Si l'on ne précise pas le dossier $(SRCDIR), la liste sera vide, tous les fichiers sources étant dans le sous-dossier src.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$(patsubst $(SRCDIR)/%.c,%.o,...)&lt;/code&gt; : permettent de remplacer les .c par des .o dans la liste précédemment constituée. Notez également que le préfixe &lt;em&gt;src/&lt;/em&gt; présent devant chaque nom de fichier est supprimé. La substitution &lt;em&gt;$(patsubst %.c,%.o,...)&lt;/em&gt; ne retire pas les préfixe &lt;em&gt;src/&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La variable &lt;code&gt;OBJS&lt;/code&gt; contient donc la liste de tous les fichiers sources mais avec l’extension .o.&lt;/p&gt;
&lt;p&gt;La recette de &lt;em&gt;%.o: %.c&lt;/em&gt; écrit bien les .o dans le sous-dossier objs.
La recette &lt;em&gt;$(APP)&lt;/em&gt; utilise une substitution pour indiquer à gcc que les fichiers .o se trouvent dans le sous-dossier objs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;OBJDIR&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;DISTDIR&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;VPATH&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OBJDIR&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;OBJS&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patsubst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="c"&gt;%.c,%.o,$(wildcard $(SRCDIR)/*.c))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ressource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OBJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patsubst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;%.o,$(OBJDIR)/%.o,$(OBJS))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c"&gt;%.o: %.c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OBJDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;$&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PHONY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ressource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OBJDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;ressource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OBJDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;mkdir -p objs dist&lt;/span&gt;
&lt;span class="go"&gt;gcc -c src/hello.c -o objs/hello.o&lt;/span&gt;
&lt;span class="go"&gt;gcc -c src/myfunction.c -o objs/myfunction.o&lt;/span&gt;
&lt;span class="go"&gt;gcc -o dist/MyApp objs/hello.o objs/myfunction.o &lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;mkdir -p objs dist&lt;/span&gt;
&lt;span class="go"&gt;gcc -o dist/MyApp objs/hello.o objs/myfunction.o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On peut constater que le fait de déplacer l'application dans le sous-dossier &lt;em&gt;dist&lt;/em&gt; relance la phase de link. Il serait préférable de copier l'application dans le dossier &lt;em&gt;dist&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;$(APP)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OBJS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    gcc -o &lt;span class="k"&gt;$(&lt;/span&gt;APP&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.o,&lt;span class="k"&gt;$(&lt;/span&gt;OBJDIR&lt;span class="k"&gt;)&lt;/span&gt;/%.o,&lt;span class="k"&gt;$(&lt;/span&gt;OBJS&lt;span class="k"&gt;))&lt;/span&gt;
    cp &lt;span class="k"&gt;$(&lt;/span&gt;APP&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;DISTDIR&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le fait de créer les .o dans le sous-dossier &lt;em&gt;objs&lt;/em&gt; complexifie la ligne de link. Voici le makefile réécrit sans ce dossier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;DISTDIR&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;VPATH&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;OBJS&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patsubst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="c"&gt;%.c,%.o,$(wildcard $(SRCDIR)/*.c))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OBJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$^&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c"&gt;%.o: %.c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PHONY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mrproper&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;mrproper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;make
&lt;span class="go"&gt;gcc -c src/hello.c -o hello.o&lt;/span&gt;
&lt;span class="go"&gt;gcc -c src/myfunction.c -o myfunction.o&lt;/span&gt;
&lt;span class="go"&gt;gcc -o MyApp hello.o myfunction.o&lt;/span&gt;
&lt;span class="go"&gt;mkdir -p dist&lt;/span&gt;
&lt;span class="go"&gt;cp MyApp dist &lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;make: Nothing to be done for `all'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;Pour installer le résultat généré par make,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;il faut copier les fichiers dans les dossiers de destinations,&lt;/li&gt;
&lt;li&gt;modifier le propriétaire et le groupe des fichiers,&lt;/li&gt;
&lt;li&gt;modifier les droits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La commande &lt;em&gt;install&lt;/em&gt; permet de réaliser ses 3 étapes en une seule. Le manuel de GNU Make recommande de ne pas utiliser directement la commande install, mais de passer par une variable $(INSTALL). Ceci permettra à l’utilisateur du makefile, de redéfinir la commande si nécessaire.&lt;/p&gt;
&lt;p&gt;Par défaut, les programmes sont installés dans /usr/local.&lt;/p&gt;
&lt;p&gt;La variable DESTIR est ajoutée devant chaque destination. Ceci permet à l'utilisateur de spécifier un path absolu comme dossier d'installation : &lt;code&gt;make DESTDIR=$HOME/stage install&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;INSTALL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; install
&lt;span class="nv"&gt;INSTALL_PROGRAM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INSTALL&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;INSTALL_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INSTALL&lt;span class="k"&gt;)&lt;/span&gt; -m &lt;span class="m"&gt;644&lt;/span&gt;

&lt;span class="nv"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /usr/local
&lt;span class="nv"&gt;bindir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;prefix&lt;span class="k"&gt;)&lt;/span&gt;/bin
&lt;span class="nv"&gt;libdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;prefix&lt;span class="k"&gt;)&lt;/span&gt;/lib

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_PROGRAM&lt;span class="k"&gt;)&lt;/span&gt; hello &lt;span class="k"&gt;$(&lt;/span&gt;DESTDIR&lt;span class="k"&gt;)$(&lt;/span&gt;bindir&lt;span class="k"&gt;)&lt;/span&gt;/hello
    &lt;span class="k"&gt;$(&lt;/span&gt;INSTALL_DATA&lt;span class="k"&gt;)&lt;/span&gt; libhello.a &lt;span class="k"&gt;$(&lt;/span&gt;DESTDIR&lt;span class="k"&gt;)$(&lt;/span&gt;libdir&lt;span class="k"&gt;)&lt;/span&gt;/libhello.a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="le-probleme-des-makefiles"&gt;Le problème des makefiles&lt;/h2&gt;
&lt;p&gt;Le problème principal est pour moi la portabilité d'un makefile entre différentes distributions Linux/UNIX ou entre OS différents.&lt;/p&gt;
&lt;p&gt;Par exemple, si votre makefile utilise des librairies tierses (qui ne font partie de l'OS), il faut en vérifier la présence, leurs emplacements et mettre à jour les variables telles que CPPFLAGS ou LDFLAGS. &lt;/p&gt;
&lt;p&gt;Lorsque vous fournissez un package de source vous ne devriez pas imposer l'emplacement des bibliothèques tierses.&lt;/p&gt;
&lt;p&gt;Les Autotools permettent de résoudre ces problèmes. Assez compliqué à mettre en oeuvre, aujourd'hui on préfère l'outil cmake.&lt;/p&gt;</content><category term="devtools"></category><category term="cmd-line"></category><category term="GNU-Tools"></category></entry><entry><title>Afficher un fichier en hexadécimal</title><link href="https://thebigfred.github.io/afficher-un-fichier-en-hexadecimal.html" rel="alternate"></link><published>2016-09-25T00:00:00+02:00</published><updated>2016-09-25T00:00:00+02:00</updated><author><name>FGE</name></author><id>tag:thebigfred.github.io,2016-09-25:/afficher-un-fichier-en-hexadecimal.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;od&lt;/strong&gt; et &lt;strong&gt;hexdump&lt;/strong&gt; permettent de visualiser le contenu d'un fichier sous forme hexadécimale. &lt;strong&gt;Ghex&lt;/strong&gt; et &lt;strong&gt;Okteta&lt;/strong&gt; en sont la version graphique, respectivement en GTK et …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;od&lt;/strong&gt; et &lt;strong&gt;hexdump&lt;/strong&gt; permettent de visualiser le contenu d'un fichier sous forme hexadécimale. &lt;strong&gt;Ghex&lt;/strong&gt; et &lt;strong&gt;Okteta&lt;/strong&gt; en sont la version graphique, respectivement en GTK et en Qt.&lt;/p&gt;
&lt;p&gt;Par défaut &lt;em&gt;od&lt;/em&gt; (octal dump) affiche les données en base 7, il faut donc lui adjoindre l'option &lt;em&gt;-x&lt;/em&gt; pour avoir un affichage hexa.&lt;/p&gt;
&lt;p&gt;od et hexdump ne présentent pas les données en big endian par défaut. on utilisera donc &lt;code&gt;od -x --endian=big hello.txt&lt;/code&gt; ou &lt;code&gt;hexdump -C hello.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La commande &lt;code&gt;hexdump -C hello.txt&lt;/code&gt; donne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;  &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;65&lt;/span&gt; 6c 6c 6f 0a                                 &lt;span class="p"&gt;|&lt;/span&gt;hello.&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="m"&gt;00000006&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La première colonne correspond à l'offset des données présentées dans la seconde colonne.&lt;/p&gt;</content><category term="devtools"></category><category term="cmd-line"></category><category term="GNU-Tools"></category></entry><entry><title>diff &amp; patch</title><link href="https://thebigfred.github.io/diff-patch.html" rel="alternate"></link><published>2016-09-25T00:00:00+02:00</published><updated>2016-09-25T00:00:00+02:00</updated><author><name>FGE</name></author><id>tag:thebigfred.github.io,2016-09-25:/diff-patch.html</id><summary type="html">&lt;p&gt;diff et patch sont deux outils en ligne de commande.&lt;/p&gt;
&lt;p&gt;diff, va vous permettre de comparer le contenu de deux fichiers ou dossiers et de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;diff et patch sont deux outils en ligne de commande.&lt;/p&gt;
&lt;p&gt;diff, va vous permettre de comparer le contenu de deux fichiers ou dossiers et de voir les ajouts et/ou suppressions qu'il y a eu entre chaque fichier.
Ce résultat peut être stocké dans un fichier, que l'on nomme patch.&lt;/p&gt;
&lt;p&gt;La commande patch permet d'appliquer un &lt;em&gt;patch&lt;/em&gt;. Le but est donc de pouvoir réappliquer une modification sur un fichier ou dossier en version originale.&lt;/p&gt;
&lt;h2 id="diff"&gt;diff&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;diff -q fichier1 fichier2&lt;/code&gt; permet de savoir si les fichiers sont différents.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff -s fichier1 fichier2&lt;/code&gt; permet de savoir si les fichiers sont identiques.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff -y fichier1 fichier2&lt;/code&gt; affiche les deux fichiers côte à côte.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff -u fichier1 fichier2&lt;/code&gt; imprime (par défaut) 3 lignes qui entourent la différence.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff -a fichier1 fichier2&lt;/code&gt; traite les fichiers comme des fichiers textes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff --color=auto fichier1 fichier2&lt;/code&gt; ajoute de la couleur au résultat.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff -r dossier1 dossier2&lt;/code&gt; permet de comparer deux dossiers récursivement.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff -N dossier1 dossier2&lt;/code&gt; traite les fichiers absents comme étant vides.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il y a évidemment une multitude d'autres options que vous découvrirez dans &lt;code&gt;man diff&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Meld&lt;/strong&gt;, &lt;strong&gt;Kdiff3&lt;/strong&gt; et &lt;strong&gt;Kompare&lt;/strong&gt; sont des versions graphiques de diff. Le premier est basé sur GTK, les deux autres sur Qt.&lt;/p&gt;
&lt;h2 id="creer-un-patch"&gt;Créer un patch&lt;/h2&gt;
&lt;p&gt;Admettons que votre répertoire de travail est $HOME/projetX. Avant de le modifier, faite en une copie &lt;code&gt;cp -r $HOME/projetX $HOME/projetX.orig&lt;/code&gt;.
Voici le fichier hello.c original :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Que vous modifiez en :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World !!!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La commande &lt;code&gt;diff -Naur projetX.orig projetX&lt;/code&gt; donne comme résultat :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;diff -Naur projetX.orig/hello.c projetX/hello.c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gd"&gt;--- projetX.orig/hello.c  2016-09-25 03:48:01.216191638 +0000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+++ projetX/hello.c 2016-09-25 03:48:12.059524697 +0000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1,6 +1,6 @@&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;#include &amp;lt;stdio.h&amp;gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;int main()&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;{&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gd"&gt;-    printf(&amp;quot;Hello\n&amp;quot;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    printf(&amp;quot;Hello world !!!\n&amp;quot;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    return 0;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;}&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour créer le patch, il suffit de rediriger la commande diff dans un fichier : &lt;code&gt;diff -Naur projetX.orig projetX &amp;gt; $HOME/bug1.patch&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pour la suite supprimer le dossier &lt;em&gt;projectX&lt;/em&gt; &lt;code&gt;rm -r $HOME/projetX&lt;/code&gt; et renommer &lt;em&gt;projetX.orig&lt;/em&gt; &lt;code&gt;mv projetX.orig projetX&lt;/code&gt; (on applique le patch sur la version d'origine).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="appliquer-un-patch"&gt;Appliquer un patch&lt;/h2&gt;
&lt;p&gt;Placez-vous dans le dossier parent de votre projet. La commande &lt;code&gt;patch -p0 &amp;lt; $hOME/bug1.patch&lt;/code&gt; appliquera votre patch sur le dossier &lt;em&gt;projetX&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si vous avez renommé, ou souhaitez appliquer le patch sur une copie du projet, appliquez la commande depuis le dossier du projet avec l'option &lt;em&gt;-p1&lt;/em&gt;: &lt;code&gt;patch -p1 &amp;lt; $HOME/bug1.patch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cette option &lt;em&gt;-p1&lt;/em&gt; permet à la commande patch d'enlever un niveau de dossier au chemin indiqué dans le fichier &lt;em&gt;.patch&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Il ne faut pas oublier que pour créer un patch, il faut conserver une copie non modifiée du projet. Ceci est grandement facilité en utilisant des outils de gestion de version comme git ou svn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="est-ce-vraiment-utile-tout-cela"&gt;Est-ce vraiment utile tout cela ?&lt;/h2&gt;
&lt;p&gt;Voici quelques exemples d'utilisation.&lt;/p&gt;
&lt;h3 id="exemple-1"&gt;Exemple 1&lt;/h3&gt;
&lt;p&gt;Vous venez de modifier votre site web, votre modification porte sur plusieurs fichiers php, js, html et css. Soit vous transférez complètement la dernière version de votre site, soit uniquement les fichiers impactés.&lt;/p&gt;
&lt;p&gt;Dans le premier cas, cela peut prendre un petit peu de temps. Dans le second cas, il faut veiller à ne pas oublier de fichiers.&lt;/p&gt;
&lt;p&gt;Une autre solution est possible, créer un patch et appliquer ce patch sur le serveur. Le patch est de petite taille comparée à la totalité du site (transfert instantané), aucune modification n'est oubliée.&lt;/p&gt;
&lt;p&gt;Ici, il faut soit un accès en ssh à votre serveur, soit une interface web qui permet d'appliquer un patch.&lt;/p&gt;
&lt;h3 id="exemple-2"&gt;Exemple 2&lt;/h3&gt;
&lt;p&gt;Admettons que vous modifiez un fichier .c du kernel, le meilleur moyen pour diffuser ou conserver cette modification est un fichier &lt;em&gt;patch&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lorsque vous recevez un &lt;em&gt;patch&lt;/em&gt;, vous pouvez l'éditer et voir les modifications qui seront apportées à l'arborescence.&lt;/p&gt;
&lt;p&gt;Votre patch sera même peut-être applicable sur les versions successives du kernel. En une commande vous pouvez réappliquer vos modifications. &lt;/p&gt;
&lt;p&gt;Par contre si vous diffusez une archive complète du kernel contenant votre modification, comment faire pour intégrer votre modification au kernel suivant ou à une version sur laquelle d'autres patchs ont déjà été appliqués ?&lt;/p&gt;</content><category term="devtools"></category><category term="cmd-line"></category><category term="GNU-Tools"></category></entry><entry><title>indent</title><link href="https://thebigfred.github.io/indent.html" rel="alternate"></link><published>2016-09-25T00:00:00+02:00</published><updated>2016-09-25T00:00:00+02:00</updated><author><name>FGE</name></author><id>tag:thebigfred.github.io,2016-09-25:/indent.html</id><summary type="html">&lt;p&gt;Fini de perdre du temps à réindenter du code selon vos goûts !&lt;/p&gt;</summary><content type="html">&lt;p&gt;Que vous codiez comme un cochon, que vous récupériez le code d'un autre développeur ou que votre supérieur vous impose un style particulier, fini de perdre du temps à réaligner du code.&lt;/p&gt;
&lt;p&gt;Voici un petit programme &lt;em&gt;cochonné&lt;/em&gt; pour illustrer la suite :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define TXT &amp;quot;Hello Wolrd!\n&amp;quot;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*A comment*/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Wolrd!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;indent&lt;/strong&gt; propose 3 styles prédéfinis.&lt;/p&gt;
&lt;p&gt;Le style GNU (le style par défaut) : &lt;code&gt;indent demo.c&lt;/code&gt; ou &lt;code&gt;indent -gnu demo.c&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/*A comment */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Wolrd!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le style Kernighan &amp;amp; Ritchie (ou style k&amp;amp;r, les concepteurs du C) : &lt;code&gt;indent -kr demo.c&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/*A comment */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Wolrd!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le style Berkeley (le style d'origine) : &lt;code&gt;indent -orig demo.c&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * A comment &lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Wolrd!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ces styles définissent chacun un ensemble d'options. Vous pouvez alors ajouter et/ou redéfinir quelques options, ou même sélectionner vous-même les options que vous souhaitez.&lt;/p&gt;
&lt;p&gt;Pour ne pas indiquer 15 options à chaque appel d'&lt;em&gt;indent&lt;/em&gt;, vous pouvez :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;soit définir la variable d'environnement INDENT_PROFILE qui indique le nom du fichier contenant les options ;&lt;/li&gt;
&lt;li&gt;soit placer un fichier &lt;em&gt;.indent.pro&lt;/em&gt; dans le dossier contenant votre code source (la commande   devra être lancé depuis ce dossier) ;&lt;/li&gt;
&lt;li&gt;soit placer un fichier &lt;em&gt;.indent.pro&lt;/em&gt; à la racine de votre dossier personnel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour activer le style k&amp;amp;r par défaut : &lt;code&gt;echo -kr &amp;gt; $HOME/.indent.pro&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pour utiliser le style GNU sans le retrait des accolades : &lt;code&gt;echo -gnu -bli0 &amp;gt; $HOME/.indent.pro&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Une lecture de la page de &lt;code&gt;man indent&lt;/code&gt; sera nécessaire pour découvrir les options, elles sont trop nombreuses pour les décrire ici.&lt;/p&gt;</content><category term="devtools"></category><category term="cmd-line"></category><category term="GNU-Tools"></category></entry></feed>